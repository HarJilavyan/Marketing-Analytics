data_sheet <- read_excel(file_path, sheet = "data")
file_path <- "datanokia.xlsx"
head(data_sheet)
library(readxl)
file_path <- "datanokia.xlsx"
data_sheet <- read_excel(file_path, sheet = "data")
library(readxl)
file_path <- "datanokia.xlsx"
data_sheet <- read_excel(file_path, sheet = "Data")
head(data_sheet)
library(readxl)
file_path <- "datanokia.xlsx"
data_sheet <- read_excel(file_path, sheet = "Data")
data_shee)
library(readxl)
file_path <- "datanokia.xlsx"
data_sheet <- read_excel(file_path, sheet = "Data")
data_sheet
data_sheet <- data_sheet[-c(1, 2), ]
data_sheet
library(readxl)
file_path <- "datanokia.xlsx"
data_sheet <- read_excel(file_path, sheet = "Data")
data_sheet
# Assuming data_sheet is your dataframe with columns 'year' and 'sales'
# Example: data_sheet <- data.frame(year = c(2009:2018), sales = c(40.98, 42.45, ...))
# Install necessary packages
if (!requireNamespace("minpack.lm", quietly = TRUE)) install.packages("minpack.lm")
# Load necessary library
library(minpack.lm)
# Calculate cumulative sales
data_sheet$cum_sales <- cumsum(data_sheet$sales)
# Assign column names to the dataframe
colnames(data_sheet) <- c("year", "sales")
# Calculate cumulative sales
data_sheet$cum_sales <- cumsum(data_sheet$sales)
# Assuming the market potential M as the maximum cumulative sales
M_estimate <- max(data_sheet$cum_sales)
# Normalize cumulative sales to get the adoption fraction, assuming M_estimate as market potential
data_sheet$Ft <- data_sheet$cum_sales / M_estimate
# Time variable, starting from 0
data_sheet$time <- data_sheet$year - min(data_sheet$year)
# Ensure the 'year' column is numeric
data_sheet$year <- as.numeric(as.character(data_sheet$year))
# Proceed with the previous steps
# Calculate cumulative sales
data_sheet$cum_sales <- cumsum(data_sheet$sales)
# Assuming the market potential M as the maximum cumulative sales
M_estimate <- max(data_sheet$cum_sales)
# Normalize cumulative sales to get the adoption fraction, assuming M_estimate as market potential
data_sheet$Ft <- data_sheet$cum_sales / M_estimate
# Adjust the time variable, ensuring it's numeric and starts from 0
data_sheet$time <- data_sheet$year - min(data_sheet$year)
# Define the Bass model function and proceed with fitting as described earlier
# Assign column names to the dataframe
colnames(data_sheet) <- c("year", "sales")
# Calculate cumulative sales
data_sheet$cum_sales <- cumsum(data_sheet$sales)
# Assuming the market potential M as the maximum cumulative sales
M_estimate <- max(data_sheet$cum_sales)
# Normalize cumulative sales to get the adoption fraction, assuming M_estimate as market potential
data_sheet$Ft <- data_sheet$cum_sales / M_estimate
# Time variable, starting from 0
data_sheet$time <- data_sheet$year - min(data_sheet$year)
# Bass model function for the cumulative adoption fraction
bass_model_cumulative <- function(time, M, p, q) {
1 - exp(- (p + q) * time) / (1 + q / p * exp(- (p + q) * time))
}
# The difference in the cumulative fraction to represent sales at each time period
bass_model_sales <- function(time, M, p, q) {
if (time == 0) {
return((p + q)^2 / p * M)
} else {
F_t = bass_model_cumulative(time, M, p, q)
F_t1 = bass_model_cumulative(time - 1, M, p, q)
return(M * (F_t - F_t1))
}
}
# Prepare the data for fitting, excluding the first year for the sales model
fit_data <- data_sheet[-1, ]
# Nonlinear least squares fitting using the sales model
nls_fit <- nls(sales ~ bass_model_sales(time, M, p, q), data = fit_data, start = list(M = M_estimate, p = 0.03, q = 0.38), algorithm = "port", control = nls.control(maxiter = 100))
library(readxl)
library(knitr)
library(readxl)
library(ggplot2)
library(ggpubr)
library(diffusion)
library(readxl)
library(knitr)
library(readxl)
library(ggplot2)
library(ggpubr)
library(diffusion)
library(readxl)
library(knitr)
library(readxl)
library(ggplot2)
library(ggpubr)
install.packages("diffusion")
library(readxl)
library(knitr)
library(readxl)
library(ggplot2)
library(ggpubr)
library(diffusion)```
library(readxl)
library(knitr)
library(readxl)
library(ggplot2)
library(ggpubr)
library(diffusion)
```{r}
library(readxl)
library(knitr)
library(readxl)
library(ggplot2)
library(ggpubr)
library(diffusion)
file_path <- "datanokia.xlsx"
data_sheet <- read_excel(file_path, sheet = "Data")
data_sheet
data_sheet <- data_sheet[-c(1, 2), ]
data_sheet
sm_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales')
sm_sales
sm_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales')
sm_sales
colnames(data_sheet) <- c("year", "sales")
sm_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales')
sm_sales
colnames(data_sheet) <- c("year", "sales")
function_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales 1999-2022')
function_sales
colnames(data_sheet) <- c("year", "sales")
function_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales 1999-2022') +
theme(axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=1))
function_sales
colnames(data_sheet) <- c("year", "sales")
function_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales 1999-2022') +
theme(axis.text.y = element_text(angle = 180, vjust = 0.5, hjust=1))
function_sales
colnames(data_sheet) <- c("year", "sales")
function_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales 1999-2022') +
theme(axis.text.y = element_text(angle = 45, vjust = 0.5, hjust=1))
function_sales
colnames(data_sheet) <- c("year", "sales")
function_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales 1999-2022')
function_sales
colnames(data_sheet) <- c("year", "sales")
function_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales 1999-2022') +
theme(axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=1))
function_sales
colnames(data_sheet) <- c("year", "sales")
function_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales 1999-2022') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
function_sales
colnames(data_sheet) <- c("year", "sales")
function_sales = ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity') +
ggtitle('Nokia sales 1999-2022') +
theme(axis.text.x = element_text(angle = -45, vjust = 0.5, hjust=1))
function_sales
#bass function
bass.f <- function(t,p,q){
((p+q)^2/p)*exp(-(p+q)*t)/
(1+(q/p)*exp(-(p+q)*t))^2
}
bass.F <- function(t,p,q){
(1-exp(-(p+q)*t))/
(1+(q/p)*exp(-(p+q)*t))
}
# Assuming data_sheet is defined with 'time' and 'sales' columns
# Example: data_sheet <- data.frame(time = 1:10, sales = c(40.98, 42.45, ...))
# Load necessary library
if (!requireNamespace("minpack.lm", quietly = TRUE)) install.packages("minpack.lm")
library(minpack.lm) # For more robust nls fitting
# Define the cumulative sales based on Bass model (integration of the density function over time)
cumulative_sales_model <- function(t, M, p, q) {
M * bass.F(t, p, q)
}
# Fit the Bass model to your cumulative sales data
# You need cumulative sales data for fitting to cumulative_sales_model
data_sheet$cum_sales <- cumsum(data_sheet$sales) # Example of calculating cumulative sales
# Initial parameter guesses
start_vals <- list(M = max(data_sheet$cum_sales), p = 0.01, q = 0.1)
# Nonlinear least squares fitting to estimate parameters M, p, and q
nls_fit <- nls(cum_sales ~ cumulative_sales_model(time, M, p, q), data = data_sheet, start = start_vals, algorithm = "port")
# Assuming you have a dataframe `data_sheet` with Nokia sales data
# Apply the diffusion analysis on the sales data
diffusion_model <- diffusion(data_sheet$sales)
# Extract and round the parameters from the diffusion model
p_value <- round(diffusion_model$w, 4)[1]  # Coefficient of innovation
q_value <- round(diffusion_model$w, 4)[2]  # Coefficient of imitation
m_value <- round(diffusion_model$w, 4)[3]  # Market potential
# Optionally, print or store the diffusion model results
print(diffusion_model)
# Use the extracted parameters (p_value, q_value, m_value) as needed
data_sheet$pred_sales <- bass.f(1:10, p = 3.825e-03, q = 7.929e-02) * 4.602e+03
years_in_dataset <- length(unique(data_sheet$year))  # This assumes years are unique and sequential
year_seq <- 1:years_in_dataset
data_sheet$pred_sales <- bass.f(year_seq, p = 3.825e-03, q = 7.929e-02) * 4.602e+03
data_sheet$pred_sales <- bass.f(1:10, p = 3.825e-03, q = 7.929e-02) * 4.602e+03
# Plot cumulative adoptions using the Bass model
cumulative_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales')
# Plot adoptions at specific time t using the Bass model
time_specific_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Adoptions at Time t of Nokia Net Sales')
# Suppress warnings and arrange the plots together
# Assuming `sm_sales` is another plot you've previously created
suppressWarnings({
ggarrange(cumulative_adoption_plot, time_specific_adoption_plot, sm_sales, ncol = 3)
})
cumulative_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = -45, vjust = 0.5, hjust=1))
time_specific_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Adoptions at Time t of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = -45, vjust = 0.5, hjust=1))
suppressWarnings({
ggarrange(cumulative_adoption_plot, time_specific_adoption_plot, sm_sales, ncol = 3)
})
cumulative_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = -45, vjust = 0.5, hjust=1))
time_specific_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Adoptions at Time t of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
suppressWarnings({
ggarrange(cumulative_adoption_plot, time_specific_adoption_plot, sm_sales, ncol = 3)
})
cumulative_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
time_specific_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Adoptions at Time t of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
suppressWarnings({
ggarrange(cumulative_adoption_plot, time_specific_adoption_plot, sm_sales, ncol = 3)
})
# Create a plot for cumulative adoptions based on the Bass model, with updated variable names
cumulative_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales')
# Create a plot for time-specific adoptions based on the Bass model, with updated variable names
time_specific_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Time-Specific Adoptions of Nokia Net Sales')
# Arrange the updated cumulative and time-specific adoption plots side by side, suppressing any warnings
suppressWarnings({
ggarrange(cumulative_adoption_nokia_plot, time_specific_adoption_nokia_plot, ncol = 2)
})
# Create a plot for cumulative adoptions based on the Bass model, with updated variable names
cumulative_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales') +
# Create a plot for time-specific adoptions based on the Bass model, with updated variable names
time_specific_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Time-Specific Adoptions of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Create a plot for cumulative adoptions based on the Bass model, with updated variable names
cumulative_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales') +
# Create a plot for time-specific adoptions based on the Bass model, with updated variable names
time_specific_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Time-Specific Adoptions of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Create a plot for cumulative adoptions based on the Bass model, with updated variable names
cumulative_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales') +
# Create a plot for time-specific adoptions based on the Bass model, with updated variable names
time_specific_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Time-Specific Adoptions of Nokia Net Sales') +
# Arrange the updated cumulative and time-specific adoption plots side by side, suppressing any warnings
suppressWarnings({
ggarrange(cumulative_adoption_nokia_plot, time_specific_adoption_nokia_plot, ncol = 2)
})
# Create a plot for cumulative adoptions based on the Bass model, with updated variable names
cumulative_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales')
# Create a plot for time-specific adoptions based on the Bass model, with updated variable names
time_specific_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Time-Specific Adoptions of Nokia Net Sales')
# Arrange the updated cumulative and time-specific adoption plots side by side, suppressing any warnings
suppressWarnings({
ggarrange(cumulative_adoption_nokia_plot, time_specific_adoption_nokia_plot, ncol = 2)
})
# Create a plot for cumulative adoptions based on the Bass model, with updated variable names
cumulative_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Create a plot for time-specific adoptions based on the Bass model, with updated variable names
time_specific_adoption_nokia_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.01, q = 0.41)) +
labs(title = 'Time-Specific Adoptions of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Arrange the updated cumulative and time-specific adoption plots side by side, suppressing any warnings
suppressWarnings({
ggarrange(cumulative_adoption_nokia_plot, time_specific_adoption_nokia_plot, ncol = 2)
})
# Extract the sales data from the `data_sheet` dataframe
sales_data <- data_sheet$sales
# Create a time sequence from 1 to the length of the sales data
time_sequence <- 1:length(sales_data)
# Fit the Bass model to the sales data using the nls function
bass_model_fit <- nls(sales_data ~ m * (((p + q)^2 / p) * exp(-(p + q) * time_sequence)) /
(1 + (q / p) * exp(-(p + q) * time_sequence))^2,
start = list(m = sum(sales_data), p = 0.02, q = 0.4),
control = nls.control(maxiter = 100, minFactor = 1/1024, printEval = TRUE, warnOnly = TRUE))
# Print the fitted model summary
summary(bass_model_fit)
sales_data <- data_sheet$sales
time_sequence <- 1:length(sales_data)
bass_model_fit <- nls(sales_data ~ m * (((p + q)^2 / p) * exp(-(p + q) * time_sequence)) /
(1 + (q / p) * exp(-(p + q) * time_sequence))^2,
start = list(m = sum(sales_data), p = 0.02, q = 0.4),
control = nls.control(maxiter = 100, minFactor = 1/1024, printEval = TRUE, warnOnly = TRUE))
# Print the fitted model summary
summary(bass_model_fit)
# Calculate predicted sales for a range using the Bass model function
data_sheet$pred_sales <- bass.f(1:nrow(data_sheet), p = 3.825e-03, q = 7.929e-02) * 4.602e+03
# Visualize actual sales and predicted sales
ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity', fill = "lightblue") +  # Actual sales as bars
geom_point(aes(y = pred_sales), color = 'red') +  # Predicted sales as points
ggtitle("Nokia Sales: Actual vs. Predicted") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sales", x = "Year")
# Calculate predicted sales for a range using the Bass model function
data_sheet$pred_sales <- bass.f(1:nrow(data_sheet), p = 3.825e-03, q = 7.929e-02) * 4.602e+03
# Visualize actual sales and predicted sales
ggplot(data = data_sheet, aes(x = year, y = sales)) +
geom_bar(stat = 'identity', fill = "lightblue") +
geom_point(aes(y = pred_sales), color = 'red') +
ggtitle("Nokia Sales: Actual vs. Predicted") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sales", x = "Year")
# Use the estimated parameters to predict sales
data_sheet$pred_sales <- bass.f(1:length(data_sheet$year), p = 0.0314, q = 0.1464) * 723.4842
# Now, we plot the actual sales and the predicted sales
library(ggplot2)
sales_plot <- ggplot(data = data_sheet, aes(x = year)) +
geom_bar(aes(y = sales), stat = 'identity', fill = "lightblue") + # Actual sales
geom_point(aes(y = pred_sales), color = 'red') + # Predicted sales
ggtitle("Nokia Sales: Actual vs Predicted") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sales", x = "Year")
# Print the plot
print(sales_plot)
# Define the range of years for the innovation prediction
years <- seq(from = 2009, to = 2008 + 50, by = 1)
# Predict sales for the specified range using the Bass model
innovation_prediction <- bass.f(1:50, p = 3.825e-03, q = 7.929e-02) * 4.602e+03
# Create a dataframe to store the predicted sales data
innovation_data <- data.frame(Year = years, Sales = innovation_prediction)
# Now, `innovation_data` contains the predicted sales for each year from 2009 to 2058
years <- seq(from = 2009, to = 2008 + 50, by = 1)
innovation_prediction <- bass.f(1:50, p = 3.825e-03, q = 7.929e-02) * 4.602e+03
innovation_data <- data.frame(Year = years, Sales = innovation_prediction)
ggplot(data = innovation_data, aes(x = Year, y = Sales)) +
geom_bar(stat='identity', fill = 'sienna2') + ylab("Sales (In million $)")
cumulative_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.F, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Cumulative Adoptions of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
time_specific_adoption_plot <- ggplot(data = data_sheet, aes(x = year, y = sales)) +
stat_function(fun = bass.f, args = list(p = 0.002, q = 0.21)) +
labs(title = 'Adoptions at Time t of Nokia Net Sales') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
suppressWarnings({
ggarrange(cumulative_adoption_plot, time_specific_adoption_plot, ncol = 2)
})
